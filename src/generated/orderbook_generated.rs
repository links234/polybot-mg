// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod polybot {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod flatbuffers {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_UPDATE_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_UPDATE_TYPE: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_UPDATE_TYPE: [UpdateType; 4] = [
  UpdateType::PriceChange,
  UpdateType::Trade,
  UpdateType::TickSizeChange,
  UpdateType::Clear,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct UpdateType(pub i8);
#[allow(non_upper_case_globals)]
impl UpdateType {
  pub const PriceChange: Self = Self(0);
  pub const Trade: Self = Self(1);
  pub const TickSizeChange: Self = Self(2);
  pub const Clear: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::PriceChange,
    Self::Trade,
    Self::TickSizeChange,
    Self::Clear,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::PriceChange => Some("PriceChange"),
      Self::Trade => Some("Trade"),
      Self::TickSizeChange => Some("TickSizeChange"),
      Self::Clear => Some("Clear"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for UpdateType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for UpdateType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for UpdateType {
    type Output = UpdateType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for UpdateType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for UpdateType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for UpdateType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SIDE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SIDE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SIDE: [Side; 2] = [
  Side::Bid,
  Side::Ask,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Side(pub i8);
#[allow(non_upper_case_globals)]
impl Side {
  pub const Bid: Self = Self(0);
  pub const Ask: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Bid,
    Self::Ask,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Bid => Some("Bid"),
      Self::Ask => Some("Ask"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Side {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Side {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Side {
    type Output = Side;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Side {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Side {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Side {}
pub enum PriceLevelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PriceLevel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PriceLevel<'a> {
  type Inner = PriceLevel<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PriceLevel<'a> {
  pub const VT_PRICE: flatbuffers::VOffsetT = 4;
  pub const VT_SIZE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PriceLevel { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PriceLevelArgs<'args>
  ) -> flatbuffers::WIPOffset<PriceLevel<'bldr>> {
    let mut builder = PriceLevelBuilder::new(_fbb);
    if let Some(x) = args.size { builder.add_size(x); }
    if let Some(x) = args.price { builder.add_price(x); }
    builder.finish()
  }


  #[inline]
  pub fn price(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PriceLevel::VT_PRICE, None).unwrap()}
  }
  #[inline]
  pub fn size(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PriceLevel::VT_SIZE, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for PriceLevel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("price", Self::VT_PRICE, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("size", Self::VT_SIZE, true)?
     .finish();
    Ok(())
  }
}
pub struct PriceLevelArgs<'a> {
    pub price: Option<flatbuffers::WIPOffset<&'a str>>,
    pub size: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PriceLevelArgs<'a> {
  #[inline]
  fn default() -> Self {
    PriceLevelArgs {
      price: None, // required field
      size: None, // required field
    }
  }
}

pub struct PriceLevelBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PriceLevelBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_price(&mut self, price: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PriceLevel::VT_PRICE, price);
  }
  #[inline]
  pub fn add_size(&mut self, size: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PriceLevel::VT_SIZE, size);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PriceLevelBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PriceLevelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PriceLevel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, PriceLevel::VT_PRICE,"price");
    self.fbb_.required(o, PriceLevel::VT_SIZE,"size");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PriceLevel<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PriceLevel");
      ds.field("price", &self.price());
      ds.field("size", &self.size());
      ds.finish()
  }
}
pub enum OrderBookSnapshotOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OrderBookSnapshot<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OrderBookSnapshot<'a> {
  type Inner = OrderBookSnapshot<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OrderBookSnapshot<'a> {
  pub const VT_TOKEN_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TIMESTAMP_UTC: flatbuffers::VOffsetT = 6;
  pub const VT_MARKET: flatbuffers::VOffsetT = 8;
  pub const VT_OUTCOME: flatbuffers::VOffsetT = 10;
  pub const VT_BIDS: flatbuffers::VOffsetT = 12;
  pub const VT_ASKS: flatbuffers::VOffsetT = 14;
  pub const VT_TICK_SIZE: flatbuffers::VOffsetT = 16;
  pub const VT_MIN_TICK_SIZE: flatbuffers::VOffsetT = 18;
  pub const VT_HASH: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OrderBookSnapshot { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OrderBookSnapshotArgs<'args>
  ) -> flatbuffers::WIPOffset<OrderBookSnapshot<'bldr>> {
    let mut builder = OrderBookSnapshotBuilder::new(_fbb);
    builder.add_timestamp_utc(args.timestamp_utc);
    if let Some(x) = args.hash { builder.add_hash(x); }
    if let Some(x) = args.min_tick_size { builder.add_min_tick_size(x); }
    if let Some(x) = args.tick_size { builder.add_tick_size(x); }
    if let Some(x) = args.asks { builder.add_asks(x); }
    if let Some(x) = args.bids { builder.add_bids(x); }
    if let Some(x) = args.outcome { builder.add_outcome(x); }
    if let Some(x) = args.market { builder.add_market(x); }
    if let Some(x) = args.token_id { builder.add_token_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn token_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookSnapshot::VT_TOKEN_ID, None).unwrap()}
  }
  #[inline]
  pub fn timestamp_utc(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(OrderBookSnapshot::VT_TIMESTAMP_UTC, Some(0)).unwrap()}
  }
  #[inline]
  pub fn market(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookSnapshot::VT_MARKET, None)}
  }
  #[inline]
  pub fn outcome(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookSnapshot::VT_OUTCOME, None)}
  }
  #[inline]
  pub fn bids(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel>>>>(OrderBookSnapshot::VT_BIDS, None)}
  }
  #[inline]
  pub fn asks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel>>>>(OrderBookSnapshot::VT_ASKS, None)}
  }
  #[inline]
  pub fn tick_size(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookSnapshot::VT_TICK_SIZE, None)}
  }
  #[inline]
  pub fn min_tick_size(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookSnapshot::VT_MIN_TICK_SIZE, None)}
  }
  #[inline]
  pub fn hash(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookSnapshot::VT_HASH, None)}
  }
}

impl flatbuffers::Verifiable for OrderBookSnapshot<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("token_id", Self::VT_TOKEN_ID, true)?
     .visit_field::<u64>("timestamp_utc", Self::VT_TIMESTAMP_UTC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("market", Self::VT_MARKET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("outcome", Self::VT_OUTCOME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PriceLevel>>>>("bids", Self::VT_BIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PriceLevel>>>>("asks", Self::VT_ASKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tick_size", Self::VT_TICK_SIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("min_tick_size", Self::VT_MIN_TICK_SIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hash", Self::VT_HASH, false)?
     .finish();
    Ok(())
  }
}
pub struct OrderBookSnapshotArgs<'a> {
    pub token_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp_utc: u64,
    pub market: Option<flatbuffers::WIPOffset<&'a str>>,
    pub outcome: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>>>,
    pub asks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>>>,
    pub tick_size: Option<flatbuffers::WIPOffset<&'a str>>,
    pub min_tick_size: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hash: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for OrderBookSnapshotArgs<'a> {
  #[inline]
  fn default() -> Self {
    OrderBookSnapshotArgs {
      token_id: None, // required field
      timestamp_utc: 0,
      market: None,
      outcome: None,
      bids: None,
      asks: None,
      tick_size: None,
      min_tick_size: None,
      hash: None,
    }
  }
}

pub struct OrderBookSnapshotBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OrderBookSnapshotBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_token_id(&mut self, token_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_TOKEN_ID, token_id);
  }
  #[inline]
  pub fn add_timestamp_utc(&mut self, timestamp_utc: u64) {
    self.fbb_.push_slot::<u64>(OrderBookSnapshot::VT_TIMESTAMP_UTC, timestamp_utc, 0);
  }
  #[inline]
  pub fn add_market(&mut self, market: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_MARKET, market);
  }
  #[inline]
  pub fn add_outcome(&mut self, outcome: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_OUTCOME, outcome);
  }
  #[inline]
  pub fn add_bids(&mut self, bids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PriceLevel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_BIDS, bids);
  }
  #[inline]
  pub fn add_asks(&mut self, asks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PriceLevel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_ASKS, asks);
  }
  #[inline]
  pub fn add_tick_size(&mut self, tick_size: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_TICK_SIZE, tick_size);
  }
  #[inline]
  pub fn add_min_tick_size(&mut self, min_tick_size: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_MIN_TICK_SIZE, min_tick_size);
  }
  #[inline]
  pub fn add_hash(&mut self, hash: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookSnapshot::VT_HASH, hash);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OrderBookSnapshotBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OrderBookSnapshotBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OrderBookSnapshot<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, OrderBookSnapshot::VT_TOKEN_ID,"token_id");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OrderBookSnapshot<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OrderBookSnapshot");
      ds.field("token_id", &self.token_id());
      ds.field("timestamp_utc", &self.timestamp_utc());
      ds.field("market", &self.market());
      ds.field("outcome", &self.outcome());
      ds.field("bids", &self.bids());
      ds.field("asks", &self.asks());
      ds.field("tick_size", &self.tick_size());
      ds.field("min_tick_size", &self.min_tick_size());
      ds.field("hash", &self.hash());
      ds.finish()
  }
}
pub enum OrderBookUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OrderBookUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OrderBookUpdate<'a> {
  type Inner = OrderBookUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OrderBookUpdate<'a> {
  pub const VT_TOKEN_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TIMESTAMP_UTC: flatbuffers::VOffsetT = 6;
  pub const VT_SEQUENCE_NUMBER: flatbuffers::VOffsetT = 8;
  pub const VT_UPDATE_TYPE: flatbuffers::VOffsetT = 10;
  pub const VT_SIDE: flatbuffers::VOffsetT = 12;
  pub const VT_PRICE_LEVELS: flatbuffers::VOffsetT = 14;
  pub const VT_REMOVED_PRICES: flatbuffers::VOffsetT = 16;
  pub const VT_TRADE_PRICE: flatbuffers::VOffsetT = 18;
  pub const VT_TRADE_SIZE: flatbuffers::VOffsetT = 20;
  pub const VT_TRADE_ID: flatbuffers::VOffsetT = 22;
  pub const VT_NEW_TICK_SIZE: flatbuffers::VOffsetT = 24;
  pub const VT_NEW_MIN_TICK_SIZE: flatbuffers::VOffsetT = 26;
  pub const VT_HASH: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OrderBookUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OrderBookUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<OrderBookUpdate<'bldr>> {
    let mut builder = OrderBookUpdateBuilder::new(_fbb);
    builder.add_sequence_number(args.sequence_number);
    builder.add_timestamp_utc(args.timestamp_utc);
    if let Some(x) = args.hash { builder.add_hash(x); }
    if let Some(x) = args.new_min_tick_size { builder.add_new_min_tick_size(x); }
    if let Some(x) = args.new_tick_size { builder.add_new_tick_size(x); }
    if let Some(x) = args.trade_id { builder.add_trade_id(x); }
    if let Some(x) = args.trade_size { builder.add_trade_size(x); }
    if let Some(x) = args.trade_price { builder.add_trade_price(x); }
    if let Some(x) = args.removed_prices { builder.add_removed_prices(x); }
    if let Some(x) = args.price_levels { builder.add_price_levels(x); }
    if let Some(x) = args.token_id { builder.add_token_id(x); }
    builder.add_side(args.side);
    builder.add_update_type(args.update_type);
    builder.finish()
  }


  #[inline]
  pub fn token_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookUpdate::VT_TOKEN_ID, None).unwrap()}
  }
  #[inline]
  pub fn timestamp_utc(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(OrderBookUpdate::VT_TIMESTAMP_UTC, Some(0)).unwrap()}
  }
  #[inline]
  pub fn sequence_number(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(OrderBookUpdate::VT_SEQUENCE_NUMBER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn update_type(&self) -> UpdateType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<UpdateType>(OrderBookUpdate::VT_UPDATE_TYPE, Some(UpdateType::PriceChange)).unwrap()}
  }
  #[inline]
  pub fn side(&self) -> Side {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Side>(OrderBookUpdate::VT_SIDE, Some(Side::Bid)).unwrap()}
  }
  #[inline]
  pub fn price_levels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel>>>>(OrderBookUpdate::VT_PRICE_LEVELS, None)}
  }
  #[inline]
  pub fn removed_prices(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OrderBookUpdate::VT_REMOVED_PRICES, None)}
  }
  #[inline]
  pub fn trade_price(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookUpdate::VT_TRADE_PRICE, None)}
  }
  #[inline]
  pub fn trade_size(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookUpdate::VT_TRADE_SIZE, None)}
  }
  #[inline]
  pub fn trade_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookUpdate::VT_TRADE_ID, None)}
  }
  #[inline]
  pub fn new_tick_size(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookUpdate::VT_NEW_TICK_SIZE, None)}
  }
  #[inline]
  pub fn new_min_tick_size(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookUpdate::VT_NEW_MIN_TICK_SIZE, None)}
  }
  #[inline]
  pub fn hash(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrderBookUpdate::VT_HASH, None)}
  }
}

impl flatbuffers::Verifiable for OrderBookUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("token_id", Self::VT_TOKEN_ID, true)?
     .visit_field::<u64>("timestamp_utc", Self::VT_TIMESTAMP_UTC, false)?
     .visit_field::<u64>("sequence_number", Self::VT_SEQUENCE_NUMBER, false)?
     .visit_field::<UpdateType>("update_type", Self::VT_UPDATE_TYPE, false)?
     .visit_field::<Side>("side", Self::VT_SIDE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PriceLevel>>>>("price_levels", Self::VT_PRICE_LEVELS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("removed_prices", Self::VT_REMOVED_PRICES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trade_price", Self::VT_TRADE_PRICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trade_size", Self::VT_TRADE_SIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trade_id", Self::VT_TRADE_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("new_tick_size", Self::VT_NEW_TICK_SIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("new_min_tick_size", Self::VT_NEW_MIN_TICK_SIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hash", Self::VT_HASH, false)?
     .finish();
    Ok(())
  }
}
pub struct OrderBookUpdateArgs<'a> {
    pub token_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp_utc: u64,
    pub sequence_number: u64,
    pub update_type: UpdateType,
    pub side: Side,
    pub price_levels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PriceLevel<'a>>>>>,
    pub removed_prices: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub trade_price: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trade_size: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trade_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub new_tick_size: Option<flatbuffers::WIPOffset<&'a str>>,
    pub new_min_tick_size: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hash: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for OrderBookUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    OrderBookUpdateArgs {
      token_id: None, // required field
      timestamp_utc: 0,
      sequence_number: 0,
      update_type: UpdateType::PriceChange,
      side: Side::Bid,
      price_levels: None,
      removed_prices: None,
      trade_price: None,
      trade_size: None,
      trade_id: None,
      new_tick_size: None,
      new_min_tick_size: None,
      hash: None,
    }
  }
}

pub struct OrderBookUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OrderBookUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_token_id(&mut self, token_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_TOKEN_ID, token_id);
  }
  #[inline]
  pub fn add_timestamp_utc(&mut self, timestamp_utc: u64) {
    self.fbb_.push_slot::<u64>(OrderBookUpdate::VT_TIMESTAMP_UTC, timestamp_utc, 0);
  }
  #[inline]
  pub fn add_sequence_number(&mut self, sequence_number: u64) {
    self.fbb_.push_slot::<u64>(OrderBookUpdate::VT_SEQUENCE_NUMBER, sequence_number, 0);
  }
  #[inline]
  pub fn add_update_type(&mut self, update_type: UpdateType) {
    self.fbb_.push_slot::<UpdateType>(OrderBookUpdate::VT_UPDATE_TYPE, update_type, UpdateType::PriceChange);
  }
  #[inline]
  pub fn add_side(&mut self, side: Side) {
    self.fbb_.push_slot::<Side>(OrderBookUpdate::VT_SIDE, side, Side::Bid);
  }
  #[inline]
  pub fn add_price_levels(&mut self, price_levels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PriceLevel<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_PRICE_LEVELS, price_levels);
  }
  #[inline]
  pub fn add_removed_prices(&mut self, removed_prices: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_REMOVED_PRICES, removed_prices);
  }
  #[inline]
  pub fn add_trade_price(&mut self, trade_price: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_TRADE_PRICE, trade_price);
  }
  #[inline]
  pub fn add_trade_size(&mut self, trade_size: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_TRADE_SIZE, trade_size);
  }
  #[inline]
  pub fn add_trade_id(&mut self, trade_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_TRADE_ID, trade_id);
  }
  #[inline]
  pub fn add_new_tick_size(&mut self, new_tick_size: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_NEW_TICK_SIZE, new_tick_size);
  }
  #[inline]
  pub fn add_new_min_tick_size(&mut self, new_min_tick_size: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_NEW_MIN_TICK_SIZE, new_min_tick_size);
  }
  #[inline]
  pub fn add_hash(&mut self, hash: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrderBookUpdate::VT_HASH, hash);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OrderBookUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OrderBookUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OrderBookUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, OrderBookUpdate::VT_TOKEN_ID,"token_id");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OrderBookUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OrderBookUpdate");
      ds.field("token_id", &self.token_id());
      ds.field("timestamp_utc", &self.timestamp_utc());
      ds.field("sequence_number", &self.sequence_number());
      ds.field("update_type", &self.update_type());
      ds.field("side", &self.side());
      ds.field("price_levels", &self.price_levels());
      ds.field("removed_prices", &self.removed_prices());
      ds.field("trade_price", &self.trade_price());
      ds.field("trade_size", &self.trade_size());
      ds.field("trade_id", &self.trade_id());
      ds.field("new_tick_size", &self.new_tick_size());
      ds.field("new_min_tick_size", &self.new_min_tick_size());
      ds.field("hash", &self.hash());
      ds.finish()
  }
}
pub enum SessionMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SessionMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SessionMetadata<'a> {
  type Inner = SessionMetadata<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SessionMetadata<'a> {
  pub const VT_SESSION_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TOKEN_ID: flatbuffers::VOffsetT = 6;
  pub const VT_START_TIMESTAMP: flatbuffers::VOffsetT = 8;
  pub const VT_END_TIMESTAMP: flatbuffers::VOffsetT = 10;
  pub const VT_UPDATE_COUNT: flatbuffers::VOffsetT = 12;
  pub const VT_MARKET: flatbuffers::VOffsetT = 14;
  pub const VT_OUTCOME: flatbuffers::VOffsetT = 16;
  pub const VT_FILE_VERSION: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SessionMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SessionMetadataArgs<'args>
  ) -> flatbuffers::WIPOffset<SessionMetadata<'bldr>> {
    let mut builder = SessionMetadataBuilder::new(_fbb);
    builder.add_update_count(args.update_count);
    builder.add_end_timestamp(args.end_timestamp);
    builder.add_start_timestamp(args.start_timestamp);
    builder.add_file_version(args.file_version);
    if let Some(x) = args.outcome { builder.add_outcome(x); }
    if let Some(x) = args.market { builder.add_market(x); }
    if let Some(x) = args.token_id { builder.add_token_id(x); }
    if let Some(x) = args.session_id { builder.add_session_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn session_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SessionMetadata::VT_SESSION_ID, None).unwrap()}
  }
  #[inline]
  pub fn token_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SessionMetadata::VT_TOKEN_ID, None).unwrap()}
  }
  #[inline]
  pub fn start_timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SessionMetadata::VT_START_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn end_timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SessionMetadata::VT_END_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn update_count(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SessionMetadata::VT_UPDATE_COUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn market(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SessionMetadata::VT_MARKET, None)}
  }
  #[inline]
  pub fn outcome(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SessionMetadata::VT_OUTCOME, None)}
  }
  #[inline]
  pub fn file_version(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(SessionMetadata::VT_FILE_VERSION, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SessionMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("session_id", Self::VT_SESSION_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("token_id", Self::VT_TOKEN_ID, true)?
     .visit_field::<u64>("start_timestamp", Self::VT_START_TIMESTAMP, false)?
     .visit_field::<u64>("end_timestamp", Self::VT_END_TIMESTAMP, false)?
     .visit_field::<u64>("update_count", Self::VT_UPDATE_COUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("market", Self::VT_MARKET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("outcome", Self::VT_OUTCOME, false)?
     .visit_field::<u32>("file_version", Self::VT_FILE_VERSION, false)?
     .finish();
    Ok(())
  }
}
pub struct SessionMetadataArgs<'a> {
    pub session_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub token_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub start_timestamp: u64,
    pub end_timestamp: u64,
    pub update_count: u64,
    pub market: Option<flatbuffers::WIPOffset<&'a str>>,
    pub outcome: Option<flatbuffers::WIPOffset<&'a str>>,
    pub file_version: u32,
}
impl<'a> Default for SessionMetadataArgs<'a> {
  #[inline]
  fn default() -> Self {
    SessionMetadataArgs {
      session_id: None, // required field
      token_id: None, // required field
      start_timestamp: 0,
      end_timestamp: 0,
      update_count: 0,
      market: None,
      outcome: None,
      file_version: 0,
    }
  }
}

pub struct SessionMetadataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SessionMetadataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_session_id(&mut self, session_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SessionMetadata::VT_SESSION_ID, session_id);
  }
  #[inline]
  pub fn add_token_id(&mut self, token_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SessionMetadata::VT_TOKEN_ID, token_id);
  }
  #[inline]
  pub fn add_start_timestamp(&mut self, start_timestamp: u64) {
    self.fbb_.push_slot::<u64>(SessionMetadata::VT_START_TIMESTAMP, start_timestamp, 0);
  }
  #[inline]
  pub fn add_end_timestamp(&mut self, end_timestamp: u64) {
    self.fbb_.push_slot::<u64>(SessionMetadata::VT_END_TIMESTAMP, end_timestamp, 0);
  }
  #[inline]
  pub fn add_update_count(&mut self, update_count: u64) {
    self.fbb_.push_slot::<u64>(SessionMetadata::VT_UPDATE_COUNT, update_count, 0);
  }
  #[inline]
  pub fn add_market(&mut self, market: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SessionMetadata::VT_MARKET, market);
  }
  #[inline]
  pub fn add_outcome(&mut self, outcome: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SessionMetadata::VT_OUTCOME, outcome);
  }
  #[inline]
  pub fn add_file_version(&mut self, file_version: u32) {
    self.fbb_.push_slot::<u32>(SessionMetadata::VT_FILE_VERSION, file_version, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SessionMetadataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SessionMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SessionMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, SessionMetadata::VT_SESSION_ID,"session_id");
    self.fbb_.required(o, SessionMetadata::VT_TOKEN_ID,"token_id");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SessionMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SessionMetadata");
      ds.field("session_id", &self.session_id());
      ds.field("token_id", &self.token_id());
      ds.field("start_timestamp", &self.start_timestamp());
      ds.field("end_timestamp", &self.end_timestamp());
      ds.field("update_count", &self.update_count());
      ds.field("market", &self.market());
      ds.field("outcome", &self.outcome());
      ds.field("file_version", &self.file_version());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OrderBookSnapshot`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_snapshot_unchecked`.
pub fn root_as_order_book_snapshot(buf: &[u8]) -> Result<OrderBookSnapshot, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OrderBookSnapshot>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OrderBookSnapshot` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_order_book_snapshot_unchecked`.
pub fn size_prefixed_root_as_order_book_snapshot(buf: &[u8]) -> Result<OrderBookSnapshot, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OrderBookSnapshot>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OrderBookSnapshot` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_snapshot_unchecked`.
pub fn root_as_order_book_snapshot_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrderBookSnapshot<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OrderBookSnapshot<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OrderBookSnapshot` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_order_book_snapshot_unchecked`.
pub fn size_prefixed_root_as_order_book_snapshot_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrderBookSnapshot<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OrderBookSnapshot<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OrderBookSnapshot and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OrderBookSnapshot`.
pub unsafe fn root_as_order_book_snapshot_unchecked(buf: &[u8]) -> OrderBookSnapshot {
  flatbuffers::root_unchecked::<OrderBookSnapshot>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OrderBookSnapshot and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OrderBookSnapshot`.
pub unsafe fn size_prefixed_root_as_order_book_snapshot_unchecked(buf: &[u8]) -> OrderBookSnapshot {
  flatbuffers::size_prefixed_root_unchecked::<OrderBookSnapshot>(buf)
}
#[inline]
pub fn finish_order_book_snapshot_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OrderBookSnapshot<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_order_book_snapshot_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OrderBookSnapshot<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod flatbuffers
}  // pub mod polybot

