// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod polybot {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod flatbuffers {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TradeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Trade<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Trade<'a> {
  type Inner = Trade<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Trade<'a> {
  pub const VT_TOKEN_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PRICE: flatbuffers::VOffsetT = 6;
  pub const VT_SIZE: flatbuffers::VOffsetT = 8;
  pub const VT_TIMESTAMP_UTC: flatbuffers::VOffsetT = 10;
  pub const VT_TRADE_ID: flatbuffers::VOffsetT = 12;
  pub const VT_SIDE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Trade { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TradeArgs<'args>
  ) -> flatbuffers::WIPOffset<Trade<'bldr>> {
    let mut builder = TradeBuilder::new(_fbb);
    builder.add_timestamp_utc(args.timestamp_utc);
    if let Some(x) = args.trade_id { builder.add_trade_id(x); }
    if let Some(x) = args.size { builder.add_size(x); }
    if let Some(x) = args.price { builder.add_price(x); }
    if let Some(x) = args.token_id { builder.add_token_id(x); }
    builder.add_side(args.side);
    builder.finish()
  }


  #[inline]
  pub fn token_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Trade::VT_TOKEN_ID, None).unwrap()}
  }
  #[inline]
  pub fn price(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Trade::VT_PRICE, None).unwrap()}
  }
  #[inline]
  pub fn size(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Trade::VT_SIZE, None)}
  }
  #[inline]
  pub fn timestamp_utc(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Trade::VT_TIMESTAMP_UTC, Some(0)).unwrap()}
  }
  #[inline]
  pub fn trade_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Trade::VT_TRADE_ID, None)}
  }
  #[inline]
  pub fn side(&self) -> i8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i8>(Trade::VT_SIDE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Trade<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("token_id", Self::VT_TOKEN_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("price", Self::VT_PRICE, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("size", Self::VT_SIZE, false)?
     .visit_field::<u64>("timestamp_utc", Self::VT_TIMESTAMP_UTC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trade_id", Self::VT_TRADE_ID, false)?
     .visit_field::<i8>("side", Self::VT_SIDE, false)?
     .finish();
    Ok(())
  }
}
pub struct TradeArgs<'a> {
    pub token_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub price: Option<flatbuffers::WIPOffset<&'a str>>,
    pub size: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp_utc: u64,
    pub trade_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub side: i8,
}
impl<'a> Default for TradeArgs<'a> {
  #[inline]
  fn default() -> Self {
    TradeArgs {
      token_id: None, // required field
      price: None, // required field
      size: None,
      timestamp_utc: 0,
      trade_id: None,
      side: 0,
    }
  }
}

pub struct TradeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TradeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_token_id(&mut self, token_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Trade::VT_TOKEN_ID, token_id);
  }
  #[inline]
  pub fn add_price(&mut self, price: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Trade::VT_PRICE, price);
  }
  #[inline]
  pub fn add_size(&mut self, size: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Trade::VT_SIZE, size);
  }
  #[inline]
  pub fn add_timestamp_utc(&mut self, timestamp_utc: u64) {
    self.fbb_.push_slot::<u64>(Trade::VT_TIMESTAMP_UTC, timestamp_utc, 0);
  }
  #[inline]
  pub fn add_trade_id(&mut self, trade_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Trade::VT_TRADE_ID, trade_id);
  }
  #[inline]
  pub fn add_side(&mut self, side: i8) {
    self.fbb_.push_slot::<i8>(Trade::VT_SIDE, side, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TradeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TradeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Trade<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Trade::VT_TOKEN_ID,"token_id");
    self.fbb_.required(o, Trade::VT_PRICE,"price");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Trade<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Trade");
      ds.field("token_id", &self.token_id());
      ds.field("price", &self.price());
      ds.field("size", &self.size());
      ds.field("timestamp_utc", &self.timestamp_utc());
      ds.field("trade_id", &self.trade_id());
      ds.field("side", &self.side());
      ds.finish()
  }
}
pub enum LastTradePriceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LastTradePrice<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LastTradePrice<'a> {
  type Inner = LastTradePrice<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LastTradePrice<'a> {
  pub const VT_TOKEN_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PRICE: flatbuffers::VOffsetT = 6;
  pub const VT_TIMESTAMP_UTC: flatbuffers::VOffsetT = 8;
  pub const VT_SEQUENCE_NUMBER: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LastTradePrice { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LastTradePriceArgs<'args>
  ) -> flatbuffers::WIPOffset<LastTradePrice<'bldr>> {
    let mut builder = LastTradePriceBuilder::new(_fbb);
    builder.add_sequence_number(args.sequence_number);
    builder.add_timestamp_utc(args.timestamp_utc);
    if let Some(x) = args.price { builder.add_price(x); }
    if let Some(x) = args.token_id { builder.add_token_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn token_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LastTradePrice::VT_TOKEN_ID, None).unwrap()}
  }
  #[inline]
  pub fn price(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LastTradePrice::VT_PRICE, None).unwrap()}
  }
  #[inline]
  pub fn timestamp_utc(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(LastTradePrice::VT_TIMESTAMP_UTC, Some(0)).unwrap()}
  }
  #[inline]
  pub fn sequence_number(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(LastTradePrice::VT_SEQUENCE_NUMBER, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LastTradePrice<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("token_id", Self::VT_TOKEN_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("price", Self::VT_PRICE, true)?
     .visit_field::<u64>("timestamp_utc", Self::VT_TIMESTAMP_UTC, false)?
     .visit_field::<u64>("sequence_number", Self::VT_SEQUENCE_NUMBER, false)?
     .finish();
    Ok(())
  }
}
pub struct LastTradePriceArgs<'a> {
    pub token_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub price: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp_utc: u64,
    pub sequence_number: u64,
}
impl<'a> Default for LastTradePriceArgs<'a> {
  #[inline]
  fn default() -> Self {
    LastTradePriceArgs {
      token_id: None, // required field
      price: None, // required field
      timestamp_utc: 0,
      sequence_number: 0,
    }
  }
}

pub struct LastTradePriceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LastTradePriceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_token_id(&mut self, token_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LastTradePrice::VT_TOKEN_ID, token_id);
  }
  #[inline]
  pub fn add_price(&mut self, price: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LastTradePrice::VT_PRICE, price);
  }
  #[inline]
  pub fn add_timestamp_utc(&mut self, timestamp_utc: u64) {
    self.fbb_.push_slot::<u64>(LastTradePrice::VT_TIMESTAMP_UTC, timestamp_utc, 0);
  }
  #[inline]
  pub fn add_sequence_number(&mut self, sequence_number: u64) {
    self.fbb_.push_slot::<u64>(LastTradePrice::VT_SEQUENCE_NUMBER, sequence_number, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LastTradePriceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LastTradePriceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LastTradePrice<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, LastTradePrice::VT_TOKEN_ID,"token_id");
    self.fbb_.required(o, LastTradePrice::VT_PRICE,"price");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LastTradePrice<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LastTradePrice");
      ds.field("token_id", &self.token_id());
      ds.field("price", &self.price());
      ds.field("timestamp_utc", &self.timestamp_utc());
      ds.field("sequence_number", &self.sequence_number());
      ds.finish()
  }
}
pub enum TradesSessionMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TradesSessionMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TradesSessionMetadata<'a> {
  type Inner = TradesSessionMetadata<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TradesSessionMetadata<'a> {
  pub const VT_SESSION_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TOKEN_ID: flatbuffers::VOffsetT = 6;
  pub const VT_START_TIMESTAMP: flatbuffers::VOffsetT = 8;
  pub const VT_END_TIMESTAMP: flatbuffers::VOffsetT = 10;
  pub const VT_TRADE_COUNT: flatbuffers::VOffsetT = 12;
  pub const VT_LAST_TRADE_COUNT: flatbuffers::VOffsetT = 14;
  pub const VT_MIN_PRICE: flatbuffers::VOffsetT = 16;
  pub const VT_MAX_PRICE: flatbuffers::VOffsetT = 18;
  pub const VT_FILE_VERSION: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TradesSessionMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TradesSessionMetadataArgs<'args>
  ) -> flatbuffers::WIPOffset<TradesSessionMetadata<'bldr>> {
    let mut builder = TradesSessionMetadataBuilder::new(_fbb);
    builder.add_last_trade_count(args.last_trade_count);
    builder.add_trade_count(args.trade_count);
    builder.add_end_timestamp(args.end_timestamp);
    builder.add_start_timestamp(args.start_timestamp);
    builder.add_file_version(args.file_version);
    if let Some(x) = args.max_price { builder.add_max_price(x); }
    if let Some(x) = args.min_price { builder.add_min_price(x); }
    if let Some(x) = args.token_id { builder.add_token_id(x); }
    if let Some(x) = args.session_id { builder.add_session_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn session_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TradesSessionMetadata::VT_SESSION_ID, None).unwrap()}
  }
  #[inline]
  pub fn token_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TradesSessionMetadata::VT_TOKEN_ID, None).unwrap()}
  }
  #[inline]
  pub fn start_timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TradesSessionMetadata::VT_START_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn end_timestamp(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TradesSessionMetadata::VT_END_TIMESTAMP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn trade_count(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TradesSessionMetadata::VT_TRADE_COUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn last_trade_count(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TradesSessionMetadata::VT_LAST_TRADE_COUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn min_price(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TradesSessionMetadata::VT_MIN_PRICE, None)}
  }
  #[inline]
  pub fn max_price(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TradesSessionMetadata::VT_MAX_PRICE, None)}
  }
  #[inline]
  pub fn file_version(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TradesSessionMetadata::VT_FILE_VERSION, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TradesSessionMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("session_id", Self::VT_SESSION_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("token_id", Self::VT_TOKEN_ID, true)?
     .visit_field::<u64>("start_timestamp", Self::VT_START_TIMESTAMP, false)?
     .visit_field::<u64>("end_timestamp", Self::VT_END_TIMESTAMP, false)?
     .visit_field::<u64>("trade_count", Self::VT_TRADE_COUNT, false)?
     .visit_field::<u64>("last_trade_count", Self::VT_LAST_TRADE_COUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("min_price", Self::VT_MIN_PRICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("max_price", Self::VT_MAX_PRICE, false)?
     .visit_field::<u32>("file_version", Self::VT_FILE_VERSION, false)?
     .finish();
    Ok(())
  }
}
pub struct TradesSessionMetadataArgs<'a> {
    pub session_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub token_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub start_timestamp: u64,
    pub end_timestamp: u64,
    pub trade_count: u64,
    pub last_trade_count: u64,
    pub min_price: Option<flatbuffers::WIPOffset<&'a str>>,
    pub max_price: Option<flatbuffers::WIPOffset<&'a str>>,
    pub file_version: u32,
}
impl<'a> Default for TradesSessionMetadataArgs<'a> {
  #[inline]
  fn default() -> Self {
    TradesSessionMetadataArgs {
      session_id: None, // required field
      token_id: None, // required field
      start_timestamp: 0,
      end_timestamp: 0,
      trade_count: 0,
      last_trade_count: 0,
      min_price: None,
      max_price: None,
      file_version: 0,
    }
  }
}

pub struct TradesSessionMetadataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TradesSessionMetadataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_session_id(&mut self, session_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TradesSessionMetadata::VT_SESSION_ID, session_id);
  }
  #[inline]
  pub fn add_token_id(&mut self, token_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TradesSessionMetadata::VT_TOKEN_ID, token_id);
  }
  #[inline]
  pub fn add_start_timestamp(&mut self, start_timestamp: u64) {
    self.fbb_.push_slot::<u64>(TradesSessionMetadata::VT_START_TIMESTAMP, start_timestamp, 0);
  }
  #[inline]
  pub fn add_end_timestamp(&mut self, end_timestamp: u64) {
    self.fbb_.push_slot::<u64>(TradesSessionMetadata::VT_END_TIMESTAMP, end_timestamp, 0);
  }
  #[inline]
  pub fn add_trade_count(&mut self, trade_count: u64) {
    self.fbb_.push_slot::<u64>(TradesSessionMetadata::VT_TRADE_COUNT, trade_count, 0);
  }
  #[inline]
  pub fn add_last_trade_count(&mut self, last_trade_count: u64) {
    self.fbb_.push_slot::<u64>(TradesSessionMetadata::VT_LAST_TRADE_COUNT, last_trade_count, 0);
  }
  #[inline]
  pub fn add_min_price(&mut self, min_price: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TradesSessionMetadata::VT_MIN_PRICE, min_price);
  }
  #[inline]
  pub fn add_max_price(&mut self, max_price: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TradesSessionMetadata::VT_MAX_PRICE, max_price);
  }
  #[inline]
  pub fn add_file_version(&mut self, file_version: u32) {
    self.fbb_.push_slot::<u32>(TradesSessionMetadata::VT_FILE_VERSION, file_version, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TradesSessionMetadataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TradesSessionMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TradesSessionMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, TradesSessionMetadata::VT_SESSION_ID,"session_id");
    self.fbb_.required(o, TradesSessionMetadata::VT_TOKEN_ID,"token_id");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TradesSessionMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TradesSessionMetadata");
      ds.field("session_id", &self.session_id());
      ds.field("token_id", &self.token_id());
      ds.field("start_timestamp", &self.start_timestamp());
      ds.field("end_timestamp", &self.end_timestamp());
      ds.field("trade_count", &self.trade_count());
      ds.field("last_trade_count", &self.last_trade_count());
      ds.field("min_price", &self.min_price());
      ds.field("max_price", &self.max_price());
      ds.field("file_version", &self.file_version());
      ds.finish()
  }
}
pub enum TradesBatchOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TradesBatch<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TradesBatch<'a> {
  type Inner = TradesBatch<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TradesBatch<'a> {
  pub const VT_TRADES: flatbuffers::VOffsetT = 4;
  pub const VT_LAST_TRADE_PRICES: flatbuffers::VOffsetT = 6;
  pub const VT_TIMESTAMP_UTC: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TradesBatch { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TradesBatchArgs<'args>
  ) -> flatbuffers::WIPOffset<TradesBatch<'bldr>> {
    let mut builder = TradesBatchBuilder::new(_fbb);
    builder.add_timestamp_utc(args.timestamp_utc);
    if let Some(x) = args.last_trade_prices { builder.add_last_trade_prices(x); }
    if let Some(x) = args.trades { builder.add_trades(x); }
    builder.finish()
  }


  #[inline]
  pub fn trades(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Trade<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Trade>>>>(TradesBatch::VT_TRADES, None)}
  }
  #[inline]
  pub fn last_trade_prices(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LastTradePrice<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LastTradePrice>>>>(TradesBatch::VT_LAST_TRADE_PRICES, None)}
  }
  #[inline]
  pub fn timestamp_utc(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TradesBatch::VT_TIMESTAMP_UTC, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TradesBatch<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Trade>>>>("trades", Self::VT_TRADES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<LastTradePrice>>>>("last_trade_prices", Self::VT_LAST_TRADE_PRICES, false)?
     .visit_field::<u64>("timestamp_utc", Self::VT_TIMESTAMP_UTC, false)?
     .finish();
    Ok(())
  }
}
pub struct TradesBatchArgs<'a> {
    pub trades: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Trade<'a>>>>>,
    pub last_trade_prices: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LastTradePrice<'a>>>>>,
    pub timestamp_utc: u64,
}
impl<'a> Default for TradesBatchArgs<'a> {
  #[inline]
  fn default() -> Self {
    TradesBatchArgs {
      trades: None,
      last_trade_prices: None,
      timestamp_utc: 0,
    }
  }
}

pub struct TradesBatchBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TradesBatchBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_trades(&mut self, trades: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Trade<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TradesBatch::VT_TRADES, trades);
  }
  #[inline]
  pub fn add_last_trade_prices(&mut self, last_trade_prices: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<LastTradePrice<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TradesBatch::VT_LAST_TRADE_PRICES, last_trade_prices);
  }
  #[inline]
  pub fn add_timestamp_utc(&mut self, timestamp_utc: u64) {
    self.fbb_.push_slot::<u64>(TradesBatch::VT_TIMESTAMP_UTC, timestamp_utc, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TradesBatchBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TradesBatchBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TradesBatch<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TradesBatch<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TradesBatch");
      ds.field("trades", &self.trades());
      ds.field("last_trade_prices", &self.last_trade_prices());
      ds.field("timestamp_utc", &self.timestamp_utc());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TradesBatch`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trades_batch_unchecked`.
pub fn root_as_trades_batch(buf: &[u8]) -> Result<TradesBatch, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TradesBatch>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TradesBatch` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trades_batch_unchecked`.
pub fn size_prefixed_root_as_trades_batch(buf: &[u8]) -> Result<TradesBatch, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TradesBatch>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TradesBatch` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trades_batch_unchecked`.
pub fn root_as_trades_batch_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TradesBatch<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TradesBatch<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TradesBatch` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trades_batch_unchecked`.
pub fn size_prefixed_root_as_trades_batch_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TradesBatch<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TradesBatch<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TradesBatch and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TradesBatch`.
pub unsafe fn root_as_trades_batch_unchecked(buf: &[u8]) -> TradesBatch {
  flatbuffers::root_unchecked::<TradesBatch>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TradesBatch and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TradesBatch`.
pub unsafe fn size_prefixed_root_as_trades_batch_unchecked(buf: &[u8]) -> TradesBatch {
  flatbuffers::size_prefixed_root_unchecked::<TradesBatch>(buf)
}
#[inline]
pub fn finish_trades_batch_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<TradesBatch<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trades_batch_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<TradesBatch<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod flatbuffers
}  // pub mod polybot

